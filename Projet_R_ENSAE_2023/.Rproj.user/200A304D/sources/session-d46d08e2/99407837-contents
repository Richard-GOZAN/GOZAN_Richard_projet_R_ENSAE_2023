library(shiny)
library(shinyWidgets)
library(sf)
library(leaflet)
library(tidyverse)
library(fst)
library(readr)
West.Afr <- read_csv("ACLED-Western_Africa.csv")
# Convertir le data.frame West.Afr en donnée fst pour permettre une performance de lecture rapide
write_fst(West.Afr, "West.Afr.fst")
West.Afr.fst <- fst::read_fst("West.Afr.fst")

# Icone selon le mouvement
type_colors <- colorFactor(c("green","#FF0000","yellow", "#FF9900","#FF6000", "#FF8000"), 
                           levels = unique(West.Afr.fst$type))

Icon <- makeAwesomeIcon(icon = 'home', 
                iconColor = type_colors(West.Afr.fst$type), 
                markerColor =  "#FF5000"
)

# Structure de la présnetation de l'application
ui <- bootstrapPage(
  ## 
  tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
  ## rendre la sortie de carte Leaflet en plein écran
  leafletOutput("map", width = "100%", height = "100%"),
  ## Afficher un panneau d'options sur la carte Leaflet.
  absolutePanel(top = 10, right = 10,
                ### Créer une liste déroulante (pickerInput) pour sélectionner un pays à afficher sur la carte
                pickerInput("pays", label = "Sélectionner un pays:",
                            ### Options d'entrée
                            choices = unique(West.Afr.fst$pays),
                            ### activer la recherche en direct d'un pays
                            options = list(`live-search` = TRUE)
                          )
                ) )
         

server <- function(input, output, session) {
  ## Fitre des doonnées selon le pays sélectionné
  filteredData <- reactive({
      West.Afr.fst %>% filter(pays == input$pays)
  })
  ## Garder que les iconnées correspondant aux données filtrées
  filteredIcon <- reactive({
    Icon$iconColor <- Icon$iconColor[West.Afr.fst$pays == input$pays]
    Icon
  })
  
  output$map <- renderLeaflet({
    leaflet(filteredData()) %>%
      addTiles() %>%
      addAwesomeMarkers(lng = ~longitude, lat = ~latitude,
                        icon = filteredIcon(), 
                        label = ~paste0(pays, " : ", type, "\n", date))
  })
  
}


shinyApp(ui, server)
