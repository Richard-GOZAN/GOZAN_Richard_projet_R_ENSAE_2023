# 1 Préparation des donn?es

# 1.1 Description 

# 1.2 Importation et mise en forme

# Chargement des packages requis

library(readxl)
library(dplyr)
library(gtsummary)
library(gt)
library(sf)
library(leaflet)
library(ggplot2)
library(ggspatial)
library(broom)
library(questionr)


# Importation du fichier Excel dans un data.frame nommé projet
projet <- read_excel("Bases/Base_Partie 1.xlsx")

# Résumons les valeurs manquantes par variable
table_missing <- projet %>%
  summarize_all(~ sum(is.na(.))) 
  

# 1.3 Création des variables 

# Renommons les variables
projet <- projet %>%
  rename(region = q1, departement = q2, sexe = q23)

# Création de  la variable "sexe_2"
projet <- projet %>%
  mutate(sexe_2 = ifelse(sexe == "Femme", 1, 0))

# Création du data.frame "langues"
langues <- projet %>%
  select(key, starts_with("q24a_"))

# Création de la variable "parle"
langues <- langues %>%
  mutate(parle = rowSums(.[2:ncol(.)]))

# Sélection des variables "key" et "parle"
langues <- langues %>%
  select(key, parle)

# Mergons les data.frame "projet" et "langues"
projet <- projet %>%
  left_join(langues, by = "key")

ggplot(projet) +
  aes(x = region, fill = sexe) +
  geom_bar(position = "dodge") +
  xlab("Région") +
  ylab("Effectifs") +
  labs(fill = "Sexe")

ggplot(projet) +
  aes(x = region, fill = sexe) +
  geom_bar() +
  geom_text(aes(label = after_stat(count)), stat = "count", position = position_stack(.5)) +
  xlab("Région") +
  ylab("Effectifs") +
  labs(fill = "Sexe")

ggplot(projet) +
  aes(
    x = region, fill = sexe, by = sexe, y = after_stat(prop),
    label = scales::percent(after_stat(prop), accuracy = 1), 
  ) +
  geom_bar(stat = "prop", position = position_dodge(.9)) +
  geom_text(
    aes(y = after_stat(prop) - .005), stat = "prop", 
    position = position_dodge(.9), vjust = "top"
  ) +
  scale_y_continuous(labels = percent)

ggplot(projet) +
  aes(x = region, fill = sexe) +
  geom_bar() +
  xlab("Région") +
  ylab("Effectifs") +
  labs(fill = "Sexe")

projet_graph <- projet %>% mutate(parle_français = ifelse(q24a_1 == 1, "Oui", "Non"),
                                  parle_wolof = ifelse(q24a_2 == 1, "Oui", "Non"),
                                  parle_Diola = ifelse(q24a_3 == 1, "Oui", "Non"),
                                  parle_Serere = ifelse(q24a_4 == 1, "Oui", "Non"),
                                  parle_Peul = ifelse(q24a_5 == 1, "Oui", "Non"),
                                  parle_Mandingue = ifelse(q24a_6 == 1, "Oui", "Non"),
                                  parle_Balante = ifelse(q24a_7 == 1, "Oui", "Non"),
                                  parle_Bambara = ifelse(q24a_9 == 1, "Oui", "Non"),
                                  parle_une_autre_langue = ifelse(q24a_10 == 1, "Oui", "Non"),)
projet_graph <- projet_graph %>% rename(Niveau_instruction = q25)
library(GGally)
ggbivariate(data = projet_graph, outcome = "parle_français", explanatory = c("sexe", "region", "Niveau_instruction"))
ggbivariate(data = projet_graph, outcome = "parle_wolof", explanatory = c("sexe", "region", "Niveau_instruction"))
ggbivariate(data = projet_graph, outcome = "parle_Diola", explanatory = c("sexe", "region", "Niveau_instruction"))
ggbivariate(data = projet_graph, outcome = "parle_Serere", explanatory = c("sexe", "region", "Niveau_instruction"))
ggbivariate(data = projet_graph, outcome = "parle_Peul", explanatory = c("sexe", "region", "Niveau_instruction"))
ggbivariate(data = projet_graph, outcome = "parle_Mandingue", explanatory = c("sexe", "region", "Niveau_instruction"))
ggbivariate(data = projet_graph, outcome = "parle_Balante", explanatory = c("sexe", "region", "Niveau_instruction"))
ggbivariate(data = projet_graph, outcome = "parle_une_autre_langue", explanatory = c("sexe", "region", "Niveau_instruction"))

# 2 Analyse descriptive

# Répartition des PME suivant le sexe, le niveau d'instruction, le statut juridique et le propriétaire locataire

tbl1 <- projet %>% tbl_summary(include = c("sexe", "q25", "q12", "q81")) %>% bold_labels()

# Répartition des PME suivant le statut juridique et le sexe, 	le niveau d’instruction et le sexe, •	Propriétaire/locataire suivant le sexe
tbl2 <- projet %>% tbl_summary(
  include = c("q25", "q12", "q81"), 
  by ="sexe", label=list(q12~ "Statut juridique", 
                         q25~ "Niveau d'instruction", 
                         q81~ "Propriétaire/locataire")) %>% 
  add_overall() %>% 
  modify_header(label ~ "**Caractéristiques**") %>%
  modify_spanning_header(c("stat_1", "stat_2") ~ "**Sexe**") %>%
  bold_labels()

## Empillement l'une sur l'autre
gtsummary::tbl_stack(
  list(tbl1, tbl2),
  group_header = c("Modèle univarié", "Modèle bivaré"), quiet = TRUE ) %>% as_flex_table()

## Agencement l'une à coté de l'autre
gtsummary::tbl_merge(
  list(tbl1, tbl2),
  tab_spanner = c("Modèle bivarié", "Modèle multivarié")) %>% as_flex_table()


# Statistiques descriptives

gtsummary::tbl_stack(
  list(tbl_filiere_1, tbl_filiere_2, tbl_filiere_3, tbl_filiere_4),
  group_header = c("arachide", "anacarde", "mangue", "riz") ## intitulé des groupes de tableau associés
)

## Agencement l'une à coté de l'autre
gtsummary::tbl_merge(
  list(tbl_filiere_1, tbl_filiere_2, tbl_filiere_3, tbl_filiere_4),
  tab_spanner = c("arachide", "anacarde", "mangue", "riz") ## intitulé des groupes de tableau associés
)
# 3 Cartographie
senegal = st_read("Bases/gadm41_SEN_shp/gadm41_SEN_1.shp")
projet_map = st_as_sf(projet, coords = c("gps_menlongitude", "gps_menlatitude"), crs=st_crs(senegal), agr = "constant")
projet_map = st_join(projet_map, senegal)

ggplot() +
  geom_sf(data=senegal)+
  geom_sf_text(data=senegal, aes(label=NAME_1))+
  geom_sf(data=projet_map, aes(color=sexe), size=2)+
  scale_color_manual(values=c("blue", "red"))+
  labs(title = "Répartition des PME suivant le sexe",
       subtitle = "Carte du Sénégal",
       color = "Sexe") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, face = "bold"))+
  coord_sf(datum = NA)+
  annotation_scale(location = "bl", text_col = "black")+
  annotation_north_arrow(location = "tl")

projet_map <- projet_map %>% rename(Niveau_instruction = q25)
ggplot() +
  geom_sf(data=senegal)+
  geom_sf_text(data=senegal, aes(label=NAME_1))+
  geom_sf(data = projet_map, aes(color = Niveau_instruction), size =3) +
  scale_color_manual(values=c("blue", "red", "green", "yellow")) +
  labs(title = "Répartition des PME suivant le niveau d'instruction",
       subtitle = "Carte du Sénégal") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, face = "bold"))+
  coord_sf(datum = NA)+
  annotation_scale(location = "bl", text_col = "black")+
  annotation_north_arrow(location = "tl")


  data <- read.csv("Bases/ACLED-Western_Africa.csv")


library(readxl)
library(lubridate)
data<- read_excel("Bases/Base_Partie 1.xlsx")
# Convertir les colonnes en format de date
data$submissiondate <- as_date(data$submissiondate)
data$start <- as_date(data$start)
data$today <- as_date(data$today)
# Résumé statistique des colonnes de date
summary(data$submissiondate)
summary(data$start)
summary(data$today)

library(ggplot2)

# Graphique de la distribution des dates de soumission
ggplot(data, aes(x = submissiondate)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "black") +
  labs(title = "Distribution des dates de soumission",
       x = "Date de soumission",
       y = "Nombre d'observations")

# Graphique des dates de début d'enregistrement des informations
ggplot(data, aes(x = start)) +
  geom_histogram(binwidth = 1, fill = "green", color = "black") +
  labs(title = "Dates de début d'enregistrement des informations",
       x = "Date de début d'enregistrement",
       y = "Nombre d'observations")

# Graphique des dates de l'enquête
ggplot(data, aes(x = today)) +
  geom_histogram(binwidth = 1, fill = "red", color = "black") +
  labs(title = "Dates de l'enquête",
       x = "Date de l'enquête",
       y = "Nombre d'observations")

# Créer le tableau gtsummary
my_table <- tbl_summary(data,
                        missing = "no",
                        include = c(submissiondate, start, today))

# Afficher le tableau
my_table


# Chargement les données
feuille1 <- read_excel("Bases/Base_Partie 2.xlsx", sheet = 1)

# Renommons la variable "country_destination" en "destination" et 
# définissons les valeurs négatives comme manquantes
feuille1 <- feuille1 %>%
  rename(destination = country_destination) %>%
  mutate(destination = ifelse(destination < 0, NA, destination))

feuille1 <- feuille1 %>%
  mutate(tranche_age = cut(age, breaks = seq(0, max(age), by = 5), include.lowest = TRUE))

feuille1 <- feuille1 %>%
  group_by(enumerator) %>%
  mutate(nombre_entretiens = n()) %>%
  ungroup()

feuille1 <- feuille1 %>%
  mutate(groupe = {set.seed(123); sample(c(0, 1), size = n(), replace = TRUE)})

# Charger les données de la deuxième feuille
feuille2 <- read_excel("Bases/Base_Partie 2.xlsx", sheet = 2)

# Fusion
feuille1 <- feuille1 %>%
  left_join(feuille2, by = "district")

feuille1 <- feuille1 %>%
  mutate(duree_entretien = endtime - starttime) %>%
  group_by(enumerator) %>%
  mutate(duree_moyenne_entretien = mean(duree_entretien)) %>%
  ungroup()

copie = feuille1
feuille1 <- feuille1 %>%
  rename_all(~paste0("endline_", .))


feuille1 %>%
  tbl_summary(
    by = endline_district,
    include = c("endline_age", "endline_children_num"), 
    type = list(endline_children_num = "continuous"),
    statistic = all_continuous() ~ "{mean}",
    label=list( endline_age~ "Age moyen", 
                endline_children_num ~ "Nombre moyen d'enfants")
  ) %>%
  add_overall() %>%
  modify_header(label ~ "") %>%
  modify_spanning_header(all_stat_cols() ~ "**District**") %>%
  bold_labels() %>%
  as_flex_table() %>%
  fontsize(size = 10) %>%
  width(width = 0.6)

t.test(endline_age ~ endline_sex, data = feuille1)

copie %>% tbl_summary(include=c(sex), by= age)%>%
add_difference(test=list( age ~ "t.test"),pvalue_fun = scales::label_pvalue(accuracy = .0001)) %>%
  add_overall()%>%as_flex_table()
